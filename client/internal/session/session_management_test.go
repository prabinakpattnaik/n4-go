package session

import (
	"bytes"
	"net"
	"testing"

	"github.com/prabinakpattnaik/n4-go/ie"
	"github.com/prabinakpattnaik/n4-go/ie/qer"
)

func TestSessionManagement(t *testing.T) {
	sei := uint64(400)
	sn := uint32(200)
	seid := uint64(1000)
	nodeIP := net.ParseIP("192.168.1.101")
	ue_ip := net.ParseIP("192.168.128.11")
	rIPAddress:= net.ParseIP("192.168.60.141")
	pdrid := uint16(10)
	farid := uint32(100)
	out_teid := uint32(1)
	//sourceinterface := uint8(1)
	fteid := ie.NewFTEID(true, false, false, false, 255, nodeIP, nil, 0)
	aa := uint8(2)
	//destionationinterface := uint8(1)
	apn := "internet"
	gateStatus := qer.NewGateStatus(qer.OPEN, qer.OPEN)
        mbr := qer.NewBR(500000, 500000)
        gbr := qer.NewBR(80, 80)
        rqi := true
        createQER, err := qer.NewCreateQER(1, 0, gateStatus, mbr, gbr, 9, rqi)
        if err != nil {
		t.Fatalf("error in creating CreateQER")
	}

	pfcpSessionEstablishmentRequest, err := CreateSession(sei, sn, nodeIP, seid, pdrid, farid, 0, fteid, aa, ie.SGiN6LAN,
	apn, nil, 1, createQER, 1, ue_ip, out_teid, rIPAddress, 10, 9)
	if err != nil {
		t.Fatalf("Create New Session Error %+v\n", err)
	}
	b, err := pfcpSessionEstablishmentRequest.Serialize()
	if err != nil {
		t.Fatalf("New PFCP Session serialization Error %+v\n", err)
	}

	/*bb := []byte{0x21, 0x32, 0x00, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x90, 0x00, 0x00, 0xc8, 0x00,
		0x00, 0x3c, 0x00, 0x05, 0x00, 0xc0, 0xa8, 0x01, 0x65, //NODEID
		0x00, 0x39, 0x00, 0x0d, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe8, 0xc0, 0xa8, 0x01, 0x65, //FTEID
		0x00, 0x01, 0x00, 0x31, 0x00, 0x38, 0x00, 0x02, 0x00, 0x0a, //CreatePDR, PDRID
		0x00, 0x1d, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0a, //Precedance
		0x00, 0x02, 0x00, 0x12, 0x00, 0x14, 0x00, 0x01, 0x01, 0x00, 0x15, 0x00, 0x09, 0x01, 0x00, 0x00, 0x00, 0xff, 0xc0, 0xa8, 0x01, 0x65, //PDI
		0x00, 0x5f, 0x00, 0x01, 0x06, //OuterHeaderRemoval
		0x00, 0x6c, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64, //FARID
		0x00, 0x03, 0x00, 0x16, 0x00, 0x6c, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64, //CreateFAR,FARID,
		0x00, 0x2c, 0x00, 0x01, 0x02, //ApplyAction
		0x00, 0x04, 0x00, 0x05, 0x00, 0x2a, 0x00, 0x01, 0x01} //Forwarding Parameters */
	bb := []byte{0x21, 0x32, 0x01, 0xd9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x90, 0x00, 0x00, 0xc8, 0x00,
	      0x00, 0x3c, 0x00, 0x05, 0x00, 0xc0, 0xa8, 0x01, 0x65,
	      0x00, 0x39, 0x00, 0x0d, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe8, 0xc0, 0xa8, 0x01, 0x65,
	      0x00, 0x01, 0x00, 0x82, 0x00, 0x38, 0x00, 0x02, 0x00, 0x0a,
	      0x00, 0x1d, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x02, 0x00, 0x53, 0x00, 0x14, 0x00, 0x01,
	      0x00, 0x00, 0x15, 0x00, 0x09, 0x01, 0x00, 0x00, 0x00, 0xff, 0xc0, 0xa8, 0x01, 0x65, 0x00, 0x16, 0x00, 0x09, 0x08, 0x69, 0x6e,
	      0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x00, 0x5d, 0x00, 0x05, 0x02, 0xc0, 0xa8, 0x80, 0x0b, 0x00, 0x17, 0x00, 0x27, 0x03,
	      0x00, 0x00, 0x21, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x69, 0x70, 0x20, 0x66, 0x72, 0x6f, 0x6d,
	      0x20, 0x61, 0x6e, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x09, 0x00, 0x00, 0x5f,
	      0x00, 0x01, 0x00, 0x00, 0x6c, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x51, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,
	      0x6d, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x71, 0x00, 0x38, 0x00, 0x02, 0x00, 0x02, 0x00, 0x1d, 0x00,
	      0x04, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x02, 0x00, 0x47, 0x00, 0x14, 0x00, 0x01, 0x02, 0x00, 0x16, 0x00, 0x09, 0x08, 0x69,
	      0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x00, 0x5d, 0x00, 0x05, 0x06, 0xc0, 0xa8, 0x80, 0x0b, 0x00, 0x17, 0x00, 0x28,
	      0x03, 0x00, 0x00, 0x22, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x69, 0x70, 0x20, 0x66, 0x72, 0x6f, 0x6d,
	      0x20, 0x61, 0x6e, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x09, 0x00, 0x00, 0x6c, 0x00, 0x04,
	      0x00, 0x00, 0x00, 0x02, 0x00, 0x51, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x6d, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01,
	      0x00, 0x03, 0x00, 0x23, 0x00, 0x6c, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x2c, 0x00, 0x01, 0x02, 0x00, 0x04, 0x00,
	      0x12, 0x00, 0x2a, 0x00, 0x01, 0x02, 0x00, 0x16, 0x00, 0x09, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x00,
	      0x03, 0x00, 0x2f, 0x00, 0x6c, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x2c, 0x00, 0x01, 0x02, 0x00, 0x04, 0x00, 0x1e,
	      0x00, 0x2a, 0x00, 0x01, 0x00, 0x00, 0x16, 0x00, 0x07, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x00, 0x54, 0x00, 0x0a,
	      0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0xa8, 0x3c, 0x8d, 0x00, 0x06, 0x00, 0x1b, 0x00, 0x51, 0x00, 0x04, 0x00, 0x00,
	      0x00, 0x01, 0x00, 0x3e, 0x00, 0x01, 0x03, 0x00, 0x25, 0x00, 0x02, 0x01, 0x00, 0x00, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00,
	      0x0a, 0x00, 0x07, 0x00, 0x33, 0x00, 0x6d, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x19, 0x00, 0x01, 0x00, 0x00, 0x1a,
	      0x00, 0x0a, 0x00, 0x00, 0x07, 0xa1, 0x20, 0x00, 0x00, 0x07, 0xa1, 0x20, 0x00, 0x1b, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00,
	      0x50, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x7c, 0x00, 0x01, 0x09, 0x00, 0x7b, 0x00, 0x01, 0x09, 0x00, 0x75, 0x00, 0x04,
	      0x00, 0x00, 0x01, 0x2c}

	if !bytes.Equal(bb, b) {
		t.Fatalf("unexpected value. want [%x}, have [%x]", bb, b)
	}

}
